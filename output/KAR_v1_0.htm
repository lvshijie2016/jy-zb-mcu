<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\output\KAR_v1_0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\output\KAR_v1_0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Thu Dec 07 16:14:43 2017
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; get_adc_value &rArr; get_moto_current_state &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[f]">ADC_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[11]">BOD_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[12]">GPIOA_IRQHandler</a> from user_it.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[13]">GPIOB_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[14]">GPIOC_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[7]">PWM_FAULT_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[17]">PWM_TIMER_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[15]">RTC_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[16]">SPI_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[9]">TIMER16_0_IRQHandler</a> from user_timer.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[a]">TIMER16_1_IRQHandler</a> from moto.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[b]">TIMER16_2_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[c]">TIMER16_3_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[8]">TWS_IRQHandler</a> from c32f0xx_iic.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[d]">UART0_IRQHandler</a> from user_uart.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[e]">UART1_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[6]">WAKEUP_IRQHandler</a> from user_it.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[10]">WDT_IRQHandler</a> from startup_c32f0xx_s.o(.text) referenced from startup_c32f0xx_s.o(RESET)
 <LI><a href="#[19]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_c32f0xx_s.o(.text)
 <LI><a href="#[18]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[19]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[28]"></a>configpad</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerConsumptionConfig
</UL>

<P><STRONG><a name="[18]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; get_adc_value &rArr; get_moto_current_state &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_run_task
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_task
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_get_tt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Check
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_run_monitoring
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_event
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_OFF_ON
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_off
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dly1us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[52]"></a>get_gpio</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_gpio &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_IOCONInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigPinsAsOutput
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigPinsAsInput
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnablePhrClk
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_t
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePhrClk_t
</UL>

<P><STRONG><a name="[59]"></a>get_adc_gpio</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_adc_gpio &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_IOCONInit
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnablePhrClk
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_t
</UL>

<P><STRONG><a name="[5a]"></a>gpio_init_t</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gpio_init_t &rArr; get_gpio &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_gpio
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[6f]"></a>wdt_init_t</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wdt_init_t &rArr; WDT_SetIntervalinMiliSec &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetWindowValue
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetIntervalinMiliSec
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SelectWDTClkSrc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnablePhrClk
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[4d]"></a>sys_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sys_init &rArr; gpio_init_t &rArr; get_gpio &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_all_event
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SystemInitial
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init_t
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_t
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init_t_PWM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init_t
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init_t
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init_t
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_P
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_get_t
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>sys_init_t</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_all_event
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SystemInitial
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init_t
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_t
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init_t_PWM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init_t
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init_t
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init_t
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_P
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_get_t
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerConsumptionConfig
</UL>

<P><STRONG><a name="[2d]"></a>DisablePhrClk_t</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisablePhrClk
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerConsumptionConfig
</UL>

<P><STRONG><a name="[78]"></a>clear_all_event</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, user_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[d7]"></a>GPIO_Clear_INT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_it.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>GPIO_Read_INTState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_it.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, user_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, user_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WAKEUP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetDeepSleepWakeupPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>set_soft_timer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, user_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_soft_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_3_t
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_blink
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_double_run
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_anticlockwise_run
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_clockwise_run
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_breathe
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay_ms
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_run_task
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_P
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moto_current_state
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_run_monitoring
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_OFF_ON
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_key_event
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
</UL>

<P><STRONG><a name="[1d]"></a>check_soft_timeout</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, user_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_3_t
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_blink
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_double_run
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_anticlockwise_run
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_clockwise_run
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_breathe
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay_ms
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_run_task
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moto_current_state
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_run_monitoring
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_OFF_ON
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_key_event
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
</UL>

<P><STRONG><a name="[d9]"></a>check_soft_timeout_PWM</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, user_timer.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>timer_delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_delay_ms &rArr; set_soft_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_key_event
</UL>

<P><STRONG><a name="[9]"></a>TIMER16_0_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, user_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER16_0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B0_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>udly1us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, user_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_head
</UL>

<P><STRONG><a name="[74]"></a>UART0_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, user_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART0_Init &rArr; UART_Open &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_IOCONInit
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnablePhrClk
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[da]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, user_uart.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>WriteUartBuf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, user_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_date_timer
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Alarm_Clock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_date_timer
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_run_monitoring
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_event
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_OFF_ON
</UL>

<P><STRONG><a name="[3e]"></a>UART_Send_t</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, user_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Send_t
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_date_timer
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Alarm_Clock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_date_timer
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_run_monitoring
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_event
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_OFF_ON
</UL>

<P><STRONG><a name="[45]"></a>uart0_get_cmd</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, user_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart0_get_cmd &rArr; get_head &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_buffer_data
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_head
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUartBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_t
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
</UL>

<P><STRONG><a name="[d]"></a>UART0_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, user_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>aperture_all_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aperture_all_on &rArr; led_set_x &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_y
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_task
</UL>

<P><STRONG><a name="[38]"></a>led_mode_get_t</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_mode_get_t
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_2_t
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_off
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_OFF_ON
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_on
</UL>

<P><STRONG><a name="[2b]"></a>aperture_all_off</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aperture_all_off &rArr; led_set_x &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_y
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_get_t
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_task
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kar_run_state
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_off
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerConsumptionConfig
</UL>

<P><STRONG><a name="[4f]"></a>led_run_task</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = led_run_task &rArr; aperture_all_breathe &rArr; led_set_x_pwm &rArr; PWM_SetDuty &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_on
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_blink
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_double_run
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_anticlockwise_run
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_clockwise_run
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_breathe
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_off
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_get_tt
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>led_mode_get_tt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = led_mode_get_tt &rArr; led_run_task &rArr; aperture_all_breathe &rArr; led_set_x_pwm &rArr; PWM_SetDuty &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_task
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_on
</UL>

<P><STRONG><a name="[47]"></a>led_mode_get</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
</UL>

<P><STRONG><a name="[77]"></a>RTC_Start</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Start &rArr; RTC_Write_Byte &rArr; IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_Byte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[94]"></a>RTC_SetTimeDate</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_SetTimeDate &rArr; RTC_Write_nByte &rArr; IIC_WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_nByte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BinToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_date_timer
</UL>

<P><STRONG><a name="[96]"></a>RTC_GetTimeDate</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_GetTimeDate &rArr; RTC_Read_nByte &rArr; IIC_ReadArray
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_nByte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToBin
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_date_timer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_date_timer
</UL>

<P><STRONG><a name="[98]"></a>RTC_SetAlarm</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_SetAlarm &rArr; RTC_Write_nByte &rArr; IIC_WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_nByte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_Byte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BinToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Alarm_Clock
</UL>

<P><STRONG><a name="[99]"></a>RTC_GetAlarm</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_GetAlarm &rArr; RTC_Read_nByte &rArr; IIC_ReadArray
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_nByte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToBin
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Alarm_Clock
</UL>

<P><STRONG><a name="[9a]"></a>RTC_Clear_GetControlStatus_2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Clear_GetControlStatus_2 &rArr; RTC_Write_Byte &rArr; IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_Byte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Alarm_Clock
</UL>

<P><STRONG><a name="[9b]"></a>RTC_Close_Alarm</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_Byte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Alarm_Int_state
</UL>

<P><STRONG><a name="[33]"></a>get_Alarm_Int_state</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Close_Alarm
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerConsumptionConfig
</UL>

<P><STRONG><a name="[48]"></a>Set_Alarm_Clock</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Set_Alarm_Clock &rArr; RTC_SetAlarm &rArr; RTC_Write_nByte &rArr; IIC_WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Clear_GetControlStatus_2
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUartBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_t
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
</UL>

<P><STRONG><a name="[4a]"></a>Set_date_timer</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Set_date_timer &rArr; RTC_SetTimeDate &rArr; RTC_Write_nByte &rArr; IIC_WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeDate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeDate
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUartBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_t
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
</UL>

<P><STRONG><a name="[4b]"></a>Get_date_timer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Get_date_timer &rArr; RTC_GetTimeDate &rArr; RTC_Read_nByte &rArr; IIC_ReadArray
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeDate
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUartBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_t
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
</UL>

<P><STRONG><a name="[4e]"></a>Rtc_Check</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Rtc_Check &rArr; RTC_Write_Byte &rArr; IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_Byte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>moto_P</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = moto_P &rArr; set_soft_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set_model
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoCom
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_OFF_ON
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_off
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerConsumptionConfig
</UL>

<P><STRONG><a name="[9c]"></a>moto_dealy_P</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, moto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>

<P><STRONG><a name="[9d]"></a>moto_D</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, moto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set_model
</UL>

<P><STRONG><a name="[49]"></a>GetMotoCom</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetMotoCom &rArr; moto_P &rArr; set_soft_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_P
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
</UL>

<P><STRONG><a name="[27]"></a>get_moto_current_state</STRONG> (Thumb, 328 bytes, Stack size 88 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = get_moto_current_state &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
</UL>

<P><STRONG><a name="[50]"></a>moto_run_task</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = moto_run_task &rArr; set_soft_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>TIMER16_1_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIMER16_1_IRQHandler &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B0_ClearIntFlag
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXCEPTION</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, abnormal_monitoring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kar_run_state
</UL>

<P><STRONG><a name="[af]"></a>exceotion_0_t</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abnormal_monitoring.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_management
</UL>

<P><STRONG><a name="[b0]"></a>exceotion_1_t</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abnormal_monitoring.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_management
</UL>

<P><STRONG><a name="[ac]"></a>exceotion_2_t</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, abnormal_monitoring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_get_t
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_management
</UL>

<P><STRONG><a name="[ad]"></a>exceotion_3_t</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, abnormal_monitoring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_management
</UL>

<P><STRONG><a name="[b1]"></a>exceotion_4_t</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abnormal_monitoring.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_management
</UL>

<P><STRONG><a name="[b2]"></a>exceotion_5_t</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abnormal_monitoring.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_management
</UL>

<P><STRONG><a name="[ae]"></a>exceotion_management</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, abnormal_monitoring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_5_t
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_4_t
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_3_t
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_2_t
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_1_t
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_0_t
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPIOC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PWM_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM_TIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIMER16_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER16_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_c32f0xx_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system_c32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SelectMainClkSrc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetAHBClkDivider
</UL>

<P><STRONG><a name="[db]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_c32f0xx.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>SYS_SetAHBClkDivider</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, c32f0xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SYS_SetAHBClkDivider &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SystemInitial
</UL>

<P><STRONG><a name="[b5]"></a>SYS_SelectMainClkSrc</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, c32f0xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SYS_SelectMainClkSrc &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SystemInitial
</UL>

<P><STRONG><a name="[73]"></a>SYS_SystemInitial</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, c32f0xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SYS_SystemInitial &rArr; SYS_SelectMainClkSrc &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SelectMainClkSrc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetAHBClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[70]"></a>SYS_SelectWDTClkSrc</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init_t
</UL>

<P><STRONG><a name="[b6]"></a>SYS_SelectClkOutSrc</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, c32f0xx_sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[dc]"></a>SYS_SetClkOutDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>SYS_EnableClkOut</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>SYS_DisableClkOut</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>SYS_SetIOFilter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>SYS_PowerDownAngIP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>SYS_PowerUpAngIP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>SYS_EnablePhrClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x_pwm
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init_t
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_gpio
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init_t
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
</UL>

<P><STRONG><a name="[2f]"></a>SYS_DisablePhrClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePhrClk_t
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerConsumptionConfig
</UL>

<P><STRONG><a name="[e2]"></a>SYS_ResetPhr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>SYS_ResetSystem</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_OFF_ON
</UL>

<P><STRONG><a name="[e3]"></a>SYS_BODResetSystem</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>SYS_GetResetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>SYS_ClearResetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>SYS_EnterSleep</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>SYS_SetDeepSleepWakeupPin</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, c32f0xx_sys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerConsumptionConfig
</UL>

<P><STRONG><a name="[79]"></a>SYS_ResetDeepSleepWakeupPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAKEUP_IRQHandler
</UL>

<P><STRONG><a name="[31]"></a>SYS_EnterDeepSleep</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, c32f0xx_sys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerConsumptionConfig
</UL>

<P><STRONG><a name="[e7]"></a>SYS_EnterPowerDown</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>SYS_IOConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>SYS_IOSetPullup</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>SYS_IOSetPulldown</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>SYS_IOSwitchtoAng</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>SYS_IOSwitchtoDigit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>SYS_IOEnableFilter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>SYS_IODisableFilter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, c32f0xx_sys.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>SYS_IOCONInit</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, c32f0xx_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYS_IOCONInit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x_pwm
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_gpio
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio
</UL>

<P><STRONG><a name="[56]"></a>GPIO_ConfigPinsAsInput</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio
</UL>

<P><STRONG><a name="[54]"></a>GPIO_ConfigPinsAsOutput</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio
</UL>

<P><STRONG><a name="[37]"></a>GPIO_SetPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_3_t
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_1_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_D
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_dealy_P
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_L_T
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_H
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_R_H
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_L_D
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_y
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_P
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_event
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_OFF_ON
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_on
</UL>

<P><STRONG><a name="[35]"></a>GPIO_ResetPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_3_t
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_2_t
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_1_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_D
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_dealy_P
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_R_T
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_H
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_L_H
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_R_H
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_L_D
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_R_D
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_y
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_P
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_event
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_OFF_ON
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_off
</UL>

<P><STRONG><a name="[ef]"></a>GPIO_InvertOutPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>GPIO_GetPinState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configpad
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_run_monitoring
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_event
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_key_event
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_on
</UL>

<P><STRONG><a name="[f0]"></a>GPIO_GetPortState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>GPIO_SetPortMask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>GPIO_ResetPortMask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>GPIO_ReadPort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>GPIO_WritePort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>GPIO_EnableInt</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, c32f0xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio
</UL>

<P><STRONG><a name="[b7]"></a>IIC_ResetDataBuff</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>

<P><STRONG><a name="[76]"></a>IIC_Init</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IIC_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ResetDataBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[b8]"></a>IIC_GetIICStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWS_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>IIC_ReadFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, c32f0xx_iic.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>IIC_SetFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_MasterReadByte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_MasterWriteData
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWS_IRQHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteByte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteArray
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadArray
</UL>

<P><STRONG><a name="[ba]"></a>IIC_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWS_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>IIC_SendByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWS_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>IIC_GetByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWS_IRQHandler
</UL>

<P><STRONG><a name="[8]"></a>TWS_IRQHandler</STRONG> (Thumb, 802 bytes, Stack size 12 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TWS_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetByte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ClearFlag
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetIICStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_c32f0xx_s.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IIC_WriteByte</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
</UL>

<P><STRONG><a name="[91]"></a>IIC_WriteArray</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IIC_WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_nByte
</UL>

<P><STRONG><a name="[8f]"></a>IIC_ReadByte</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_Byte
</UL>

<P><STRONG><a name="[93]"></a>IIC_ReadArray</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, c32f0xx_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_ReadArray
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_nByte
</UL>

<P><STRONG><a name="[bd]"></a>IIC_MasterWriteData</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, c32f0xx_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
</UL>

<P><STRONG><a name="[be]"></a>IIC_MasterReadByte</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, c32f0xx_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SetFlag
</UL>

<P><STRONG><a name="[5d]"></a>PWM_Init</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, c32f0xx_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PWM_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init_t
</UL>

<P><STRONG><a name="[f6]"></a>PWM_DeInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, c32f0xx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>PWM_SetRelaodFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, c32f0xx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>PWM_SetDuty</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, c32f0xx_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PWM_SetDuty &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x_pwm
</UL>

<P><STRONG><a name="[5e]"></a>PWM_SetRiseDeadZone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c32f0xx_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init_t
</UL>

<P><STRONG><a name="[5f]"></a>PWM_SetFallDeadZone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c32f0xx_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init_t
</UL>

<P><STRONG><a name="[60]"></a>PWM_EnableFaultProtect</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, c32f0xx_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWM_EnableFaultProtect
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init_t
</UL>

<P><STRONG><a name="[f8]"></a>PWM_ClearFault</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, c32f0xx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>PWM_Start</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, c32f0xx_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init_t
</UL>

<P><STRONG><a name="[f9]"></a>PWM_Stop</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, c32f0xx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>PWM_EnableInt</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, c32f0xx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>PWM_ADCTrigger</STRONG> (Thumb, 154 bytes, Stack size 4 bytes, c32f0xx_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[6a]"></a>CT16B0_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, c32f0xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CT16B0_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init_t_PWM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init_t
</UL>

<P><STRONG><a name="[6c]"></a>CT16B0_ConfigMatch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, c32f0xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CT16B0_ConfigMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init_t_PWM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init_t
</UL>

<P><STRONG><a name="[fb]"></a>CT16B0_SetTimerCounter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>CT16B0_ResetTimerCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init_t_PWM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init_t
</UL>

<P><STRONG><a name="[fc]"></a>CT16B0_GetTimerCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>CT16B0_ClearIntFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_1_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_0_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>CT16B0_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init_t_PWM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init_t
</UL>

<P><STRONG><a name="[fd]"></a>CT16B0_DisableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>CT16B2_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, c32f0xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[fe]"></a>CT16B2_SetCTType</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>CT16B2_SelectTimerClearSignal</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>CT16B2_SelectPriSrc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>CT16B2_SelectSecSrc</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>CT16B2_ConfigMatch0</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>CT16B2_ConfigMatch1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>CT16B2_ConfigMatch2</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>CT16B2_ConfigMatch3</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>CT16B2_ConfigCapture0</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>CT16B2_ConfigCapture1</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>CT16B2_ConfigCapture2</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>CT16B2_ConfigCapture3</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>CT16B2_GetCapture0Value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>CT16B2_GetCapture1Value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>CT16B2_GetCapture2Value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>CT16B2_GetCapture3Value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>CT16B2_SetTimerCounter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>CT16B2_ResetTimerCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>CT16B2_GetTimerCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>CT16B2_ClearIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>CT16B2_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>CT16B2_DisableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>TIM_PWMConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, c32f0xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>UART_Open</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, c32f0xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_Open &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[c4]"></a>UART_ClearIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c32f0xx_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
</UL>

<P><STRONG><a name="[c3]"></a>UART_DisableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c32f0xx_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
</UL>

<P><STRONG><a name="[c2]"></a>UART_Close</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, c32f0xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearIntFlag
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[115]"></a>UART_ByteRead</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, c32f0xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>UART_Read</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, c32f0xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>UART_ByteWrite</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, c32f0xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>UART_Write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, c32f0xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>UART_Send</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, c32f0xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>UART_PutString</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, c32f0xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>UART_PutHex</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, c32f0xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>UART_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>UART_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c32f0xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>UART_ClearFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, c32f0xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>ADC_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, c32f0xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init_t
</UL>

<P><STRONG><a name="[63]"></a>ADC_DeInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, c32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init_t
</UL>

<P><STRONG><a name="[66]"></a>ADC_SelectTriggerSource</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, c32f0xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_SelectTriggerSource
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init_t
</UL>

<P><STRONG><a name="[11f]"></a>ADC_SetHighCmp0</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, c32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>ADC_SetHighCmp1</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, c32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>ADC_SetLowCmp0</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, c32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>ADC_SetLowCmp1</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, c32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>ADC_EnableConversionInt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, c32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>ADC_GetConversionData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, c32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>ADC_SetupChannels</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, c32f0xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetupChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init_t
</UL>

<P><STRONG><a name="[65]"></a>ADC_EnableChannels</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, c32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init_t
</UL>

<P><STRONG><a name="[125]"></a>ADC_DisableChannels</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, c32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>ADC_WaitAdcReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, c32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init_t
</UL>

<P><STRONG><a name="[126]"></a>WDT_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, c32f0xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>WDT_Deinit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, c32f0xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>WDT_SetWindowValue</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, c32f0xx_wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init_t
</UL>

<P><STRONG><a name="[51]"></a>WDT_Feed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, c32f0xx_wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init_t
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>WDT_SetIntervalinTick</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, c32f0xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>WDT_SetIntervalinMiliSec</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, c32f0xx_wdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WDT_SetIntervalinMiliSec &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init_t
</UL>

<P><STRONG><a name="[129]"></a>WDT_EnableResetSystem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, c32f0xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>WDT_ClearIntFlag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, c32f0xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>WDT_GetCounterValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, c32f0xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>WDT_EnableLock</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, c32f0xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B2_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_breathe
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetIntervalinMiliSec
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B0_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_head
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_cmd
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_cmd
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_P
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_1_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_1_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moto_current_state
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[23]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[20]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moto_current_state
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
</UL>

<P><STRONG><a name="[21]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_1_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moto_current_state
</UL>

<P><STRONG><a name="[1f]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moto_current_state
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
</UL>

<P><STRONG><a name="[24]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
</UL>

<P><STRONG><a name="[22]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moto_current_state
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_1_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[133]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[134]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[135]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[cd]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[cb]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ca]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[1b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[137]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[46]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ADCTrigger
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SelectClkOutSrc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceotion_management
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set_model
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_y
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_task
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
</UL>

<P><STRONG><a name="[138]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[139]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[30]"></a>dly1us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_on
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_off
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerConsumptionConfig
</UL>

<P><STRONG><a name="[1c]"></a>get_adc_value</STRONG> (Thumb, 540 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = get_adc_value &rArr; get_moto_current_state &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moto_current_state
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnablePhrClk
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>LowPowerConsumptionConfig</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_P
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Alarm_Int_state
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_off
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetDeepSleepWakeupPin
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnterDeepSleep
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisablePhrClk
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePhrClk_t
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configpad
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dly1us
</UL>

<P><STRONG><a name="[34]"></a>kar_off</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kar_off &rArr; aperture_all_off &rArr; led_set_x &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_P
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_off
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dly1us
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_run_monitoring
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kar_run_state
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_on
</UL>

<P><STRONG><a name="[36]"></a>kar_on</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = kar_on &rArr; led_mode_get_tt &rArr; led_run_task &rArr; aperture_all_breathe &rArr; led_set_x_pwm &rArr; PWM_SetDuty &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_get_tt
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_get_t
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinState
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_off
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dly1us
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_OFF_ON
</UL>

<P><STRONG><a name="[3a]"></a>power_key_event</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = power_key_event &rArr; timer_delay_ms &rArr; set_soft_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay_ms
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_event
</UL>

<P><STRONG><a name="[3c]"></a>power_OFF_ON</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = power_OFF_ON &rArr; kar_on &rArr; led_mode_get_tt &rArr; led_run_task &rArr; aperture_all_breathe &rArr; led_set_x_pwm &rArr; PWM_SetDuty &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_P
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_get_t
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUartBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_t
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetSystem
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_on
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>Handler_event</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Handler_event &rArr; power_key_event &rArr; timer_delay_ms &rArr; set_soft_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUartBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_t
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinState
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_key_event
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>get_kar_run_state</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_kar_run_state &rArr; kar_off &rArr; aperture_all_off &rArr; led_set_x &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_off
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXCEPTION
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_off
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_connect
</UL>

<P><STRONG><a name="[43]"></a>state_run_monitoring</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = state_run_monitoring &rArr; kar_off &rArr; aperture_all_off &rArr; led_set_x &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUartBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_t
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinState
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kar_off
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>kar_connect</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = kar_connect &rArr; Set_Alarm_Clock &rArr; RTC_SetAlarm &rArr; RTC_Write_nByte &rArr; IIC_WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_cmd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_get
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUartBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_t
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_date_timer
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Alarm_Clock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_date_timer
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotoCom
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kar_run_state
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_t
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init_t_PWM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init_t
</UL>

<P><STRONG><a name="[5c]"></a>pwm_init_t</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pwm_init_t &rArr; PWM_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetRiseDeadZone
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFallDeadZone
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableFaultProtect
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[62]"></a>adc_init_t</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_init_t &rArr; ADC_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_WaitAdcReady
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetupChannels
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectTriggerSource
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableChannels
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnablePhrClk
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[69]"></a>timer0_init_t</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer0_init_t &rArr; CT16B0_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B0_ResetTimerCounter
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B0_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B0_EnableInt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B0_ConfigMatch
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[6e]"></a>timer1_init_t_PWM</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer1_init_t_PWM &rArr; CT16B0_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B0_ResetTimerCounter
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B0_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B0_EnableInt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B0_ConfigMatch
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[75]"></a>UART1_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_t
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[58]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init_t_PWM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init_t
</UL>

<P><STRONG><a name="[55]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePhrClk_t
</UL>

<P><STRONG><a name="[7f]"></a>get_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_buffer_data
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_head
</UL>

<P><STRONG><a name="[7d]"></a>get_head</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, user_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_head &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udly1us
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_cmd
</UL>

<P><STRONG><a name="[80]"></a>get_buffer_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, user_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_buffer_data
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_get_cmd
</UL>

<P><STRONG><a name="[7c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, user_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[81]"></a>led_set_x</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = led_set_x &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_IOCONInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigPinsAsOutput
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnablePhrClk
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_on
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_blink
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_double_run
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_anticlockwise_run
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_clockwise_run
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_off
</UL>

<P><STRONG><a name="[82]"></a>led_set_x_pwm</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = led_set_x_pwm &rArr; PWM_SetDuty &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_IOCONInit
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnablePhrClk
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_breathe
</UL>

<P><STRONG><a name="[84]"></a>led_set_y</STRONG> (Thumb, 344 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_set_y &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_on
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_blink
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_double_run
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_anticlockwise_run
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_clockwise_run
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_breathe
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aperture_all_off
</UL>

<P><STRONG><a name="[85]"></a>aperture_all_breathe</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = aperture_all_breathe &rArr; led_set_x_pwm &rArr; PWM_SetDuty &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_y
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x_pwm
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_task
</UL>

<P><STRONG><a name="[88]"></a>aperture_clockwise_run</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aperture_clockwise_run &rArr; led_set_x &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_y
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_task
</UL>

<P><STRONG><a name="[89]"></a>aperture_anticlockwise_run</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aperture_anticlockwise_run &rArr; led_set_x &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_y
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_task
</UL>

<P><STRONG><a name="[8a]"></a>aperture_double_run</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aperture_double_run &rArr; led_set_x &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_y
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_task
</UL>

<P><STRONG><a name="[8b]"></a>aperture_all_blink</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aperture_all_blink &rArr; led_set_x &rArr; SYS_IOCONInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_y
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set_x
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soft_timer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_soft_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_task
</UL>

<P><STRONG><a name="[95]"></a>RTC_BinToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeDate
</UL>

<P><STRONG><a name="[97]"></a>RTC_Bcd2ToBin</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeDate
</UL>

<P><STRONG><a name="[8c]"></a>RTC_Write_Byte</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_Write_Byte &rArr; IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Close_Alarm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Clear_GetControlStatus_2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Start
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Check
</UL>

<P><STRONG><a name="[8e]"></a>RTC_Read_Byte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Read_Byte &rArr; IIC_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Close_Alarm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Clear_GetControlStatus_2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Start
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Alarm_Int_state
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Check
</UL>

<P><STRONG><a name="[90]"></a>RTC_Write_nByte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Write_nByte &rArr; IIC_WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeDate
</UL>

<P><STRONG><a name="[92]"></a>RTC_Read_nByte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_Read_nByte &rArr; IIC_ReadArray
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeDate
</UL>

<P><STRONG><a name="[9e]"></a>moto_R_D</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, moto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set_model
</UL>

<P><STRONG><a name="[9f]"></a>moto_L_D</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, moto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set_model
</UL>

<P><STRONG><a name="[a0]"></a>moto_R_H</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, moto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set_model
</UL>

<P><STRONG><a name="[a1]"></a>moto_L_H</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, moto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set_model
</UL>

<P><STRONG><a name="[a2]"></a>moto_H</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, moto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set_model
</UL>

<P><STRONG><a name="[a3]"></a>moto_R_T</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, moto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set_model
</UL>

<P><STRONG><a name="[a4]"></a>moto_L_T</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, moto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set_model
</UL>

<P><STRONG><a name="[a5]"></a>moto_set_model</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, moto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_D
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_L_T
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_R_T
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_H
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_L_H
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_R_H
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_L_D
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_R_D
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_P
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[c1]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, c32f0xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
